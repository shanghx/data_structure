//递归版本
#include <iostream>
using namespace std;
void Merge(int* arr, int* tmp, int left, int mid, int right)
{
  int begin_1 = left;
  int end_1 = mid;
  int begin_2 = mid + 1;
  int end_2 = right;
  int index = begin_1;
  while (begin_1 <= end_1 && begin_2 <= end_2)
  {
    if (arr[begin_1] < arr[begin_2])
      tmp[index++] = arr[begin_1++];
    else
      tmp[index++] = arr[begin_2++];
  }
  while (begin_1 <= end_1)
    tmp[index++] = arr[begin_1++];
  while (begin_2 <= end_2)
    tmp[index++] = arr[begin_2++];
}
void _MergeSort(int* arr, int *tmp, int left, int right)
{
//非递归版本
void Merge(int* arr, int left, int mid, int right, int* tmp)
{
  int begin_1 = left;
  int end_1 = mid;
  int begin_2 = mid + 1;
  int end_2 = right;
  int index = begin_1;
  while (begin_1 <= end_1 && begin_2 <= end_2)
  {
    if (arr[begin_1] < arr[begin_2])
      tmp[index++] = arr[begin_1++];
    else
      tmp[index++] = arr[begin_2++];
  }
  while (begin_1 <= end_1)
    tmp[index++] = arr[begin_1++];
  while (begin_2 <= end_2)
    tmp[index++] = arr[begin_2++];
}
void _MergeSort(int *arr, int *tmp, int size)
{
  int gap = 1;
  while (gap < size)
