/*****************************************************************************
文件名: 赫夫曼树.cpp 作者:尚航行
日期:2017/11/5
功能:对任意输入的一组数据可以构造其Huffman树，并根据其Huffman树可以求出其编码
分两部分：建立Huffman树，和求编码的函数
修改:无
*****************************************************************************/
#include<iostream>
#include<string>
using namespace std;
/*建立结构体，分别存放权重、双亲、左孩子、右孩子 */
typedef struct node
{
	int weight;
	int parent;
	int lchild;
	int rchild;
}HTNode, * HuffmanTree;
typedef char * *HuffmanCode;//定义HuffmanCode为一个指向字符指针的类型名
/*选出最小权值的两个下标函数，先选出s1是最小权重的下标，再选出s2是次小权重的下标*/
void select(HuffmanTree &HT, int n, int &s1, int &s2)
{
	int fflag=0;int sflag = 1;//在此设置标志，分别用于给s1，s2赋值
	for (int i = 1;i <= n; i++)
	{
		if (HT[i].parent == 0)//当其双亲是0时，判断大小
		{
			if (fflag == 0)
			{
				s1 = i; fflag++;  //给s1赋初值
			}
		/*若此时的weight小于s1的weight，将此时的i赋值给s1*/
			if (HT[i].weight < HT[s1].weight)
				s1 = i;
		}
	}
	
	for (int i = 1; i <= n; i++)
	{
		/*找s2方法与s1方向相似，区别在于判断条件多加了i！=s1，使得此时的i不等于s1，且是当前最小权重的下标*/
		if (HT[i].parent == 0&&i!=s1)
		{
			if (sflag == 1)
			{
				s2 = i; sflag++;
				
			}	
			if ((HT[i].weight < HT[s2].weight))
				s2 = i; 
		}	
	}
}	
/*建立Huffman树函数*/
void creatHuffman(HuffmanTree &HT, int n)
{
	/*HT是结构体的一个变量，n为权重的个数*/
	int m, i, s1, s2;
	m = 2 * n - 1;//计算总共的节点数  
	/*使得每个数据的parent,lchild,rchild分别为0*/
	for (i = 1; i <= n; i++)
	{
		HT[i].parent = 0;
		HT[i].lchild = 0;
		HT[i].rchild = 0;
	}
	/*此时i=n+1;跳出循环 将每个数据weight,parent,lchild,rchild分别为0*/
	for (; i <= m; i++)
	{
		HT[i].weight = 0;
		HT[i].parent = 0;
		HT[i].lchild = 0;
		HT[i].rchild = 0;
	}
	/*让i=n+1;i此时就是非叶子节点，开始对剩余节点的parent，lchild，rchild赋值*/
		for (i = n + 1; i <= m; ++i)
		{
			select(HT, i-1, s1, s2);/*执行select函数，选出当前权重最小的两个下标*/
			HT[s1].parent = i; HT[s2].parent = i;/*找到之后，此时HT[s1]和 HT[s2]的双亲就是i*/
			HT[i].lchild = s1; HT[i].rchild = s2;/*同理，此时i的左右孩子分别是s1，s2*/
			HT[i].weight = HT[s1].weight + HT[s2].weight;/*此时HT[i]的weight就是HT[s1]和HT[s2]的权重之和*/
		}
}/*输出 函数*/
void print(HuffmanTree &HT, int n)
{
	/*分别传入HT，以及权重的个数*/
	HuffmanTree p;
	p = HT; int i;
	cout << "权重" << '\t' << "双亲" << '\t' << "左孩子" << '\t' << "右孩子" << '\t' << endl;
	for ( i = 1; i<=2*n-1; i++)
	{	
		cout << p[i].weight << "\t" << p[i].parent << "\t" << p[i].lchild << "\t" << p[i].rchild << endl;
	}
	
}
/*求编码函数*/
void Encode(HuffmanTree &HT,HuffmanCode &HC,int n)
{
	/*传入要计算权重的个数*/
	char * cd; int i, start, c, f; int x;
		HC = (HuffmanCode)malloc((n + 1) * sizeof(char*));/*先给HC开辟空间*/	cd = (char*)malloc(n * sizeof(char));/*cd就是字数数组的第一个地址*/	cd[n - 1] = '\0';/*先给字符串的最后一个字符赋值\0*/	for (i = 1; i <= n; ++i)	{		/*循环，分别求各个叶子节点的编码*/		start = n - 1;/*定义start*/		/*先将此时i的值给c，f是下标i的parent，当下标i对应的parent等于0时，跳出循环，		否则，判断此时HT[f]的lchild是否等于c，等于的话就给cd数组传入一个值0，否则传入1*/		for (c = i, f = HT[i].parent; f != 0; c = f, f = HT[f].parent)/**/			if (HT[f].lchild == c)  cd[--start] = '0';			else cd[--start] = '1';			/*循环之后，说明已经给cd数组已经赋值完成，再将此时cd数组第一个元素地址存放在HC数组里面，			HC数组里面存放的就是每个字符数组cd的第一个元素的地址(也就是每个字符数组的地址，一个字符数组对应一个编码*/			HC[i] = (char*)malloc((n - start) * sizeof(char));/*先给HC[i]开辟空间，也就是给每个编码开辟空间*/			x = n - start ;/*x为编码中字符的个数*/			strcpy_s(HC[i],x,&cd[start]);/*再将所求出的编码的地址复制到HC的各个元素，此时HC[i]就对应每个编码的地址*/	}	free(cd);/*最后释放掉数组cd*/

}
void main()
{
	HuffmanCode HC;
	HuffmanTree HT;
	int N; int i;
	cout << "请输入权重的个数:" ;
	cin >> N;
	HT = (HuffmanTree)malloc((2*N) * sizeof(HTNode));//动态分配空间存储赫夫曼树
	cout  << "请输入各个权重:"<<endl;
	for (i = 1; i <= N; i++)
	{	
		cin >> HT[i].weight;//给每个叶子节点赋值权重
	} 
	creatHuffman(HT, N);//创建赫夫曼树
	print(HT,N);
	cout << "\n" << "对应各编码如下：" << endl;
	/*求编码*/
	Encode(HT,HC,N);   
	for(int i=1;i<=N;i++)
	{
		cout << HT[i].weight << '\t';
		cout << HC[i] ? HC[i] : NULL;
		cout << endl;
	}
	/*之后释放点所有空间*/
	free(HT); free(HC);
	system("pause");
}/**/


