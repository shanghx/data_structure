/*****************************************************************************
文件名: 归并.cpp 作者:尚航行
日期:2017/10/3
功能:
用c实现线性表
建立两个链表，通过连接两个链表中的节点完成相应操作
修改:无
*****************************************************************************/
#include<stdio.h>
#include<stdlib.h>
typedef struct A                            //建立结构体
{
	float coef;
	int expn;
	struct A * next;
}L;

L *Lahead, *pa, *p, *pc,*qa,*qb,*q,*w;                         //定义两个链表的指针
L *Lbhead, *pb, *Lchead;

int m = sizeof(L);                                 //计算结构体所占的字节

void Labulid()                                       //建立La链表
{
	pa = (L*)malloc(m);
	Lahead = pa;                                          //先开辟一个空间给Pa,让head指向该区域
	L * pBefore = NULL;	                                //接着再定义一个节点pBefore，让它时刻都指向遍历指针所指向节点的前一个节点
	pa = (L*)malloc(m);                                      //再开辟一个节点，作为链表的的第一个节点,里面存放链表第一个元素    
	Lahead->next = pa;
	printf("请连续输入La的元素，用空格隔开，按'0'结束输入:\n");
	while (1)                                                 //循环开始，当输入的数据是'0'时，跳出循环
	{
		scanf_s("%f  %d", &pa->coef, &pa->expn);
		if (pa->coef == 0.0)
		{
			free(pa);	                                    //当输入数据是‘0’时，释放掉当前节点
			break;
		}
		pBefore = pa;            //当输入的数据不为'0'时，先让当前节点赋值给PBefore,再开辟一个新的空间，让pa->next指向下新的节点，再让pa指向pa->next,继续循环
		pa->next = (L*)malloc(m);
		pa = pa->next;
	}
	pBefore->next = NULL;   
	//循环结束，此时PBefore为链表最后一个节点，让它的next指向NULL
}
/* 建立链表Lb,方法和La相同，注释参考La*/
void Lbbulid()
{
	pb = (L*)malloc(m);
	L * pBefore = NULL;
	Lbhead = pb;
	pb = (L*)malloc(m);
	Lbhead->next = pb;
	printf("请连续输入Lb的元素，用空格隔开，按'0'结束输入:\n");
	while (1)
	{
		scanf_s("%f  %d", &pb->coef, &pb->expn);
		if (pb->coef == 0.0) {

			free(pb);
			break;
		}
		pb->next = (L*)malloc(m);
		pBefore = pb;
		pb = pb->next;

	}
	pBefore->next = NULL;
}
/*La输出函数*/
void Ladisplay()
{
	pa = Lahead->next; printf("A组数据：");     //让pa指向第一个节点，循环，当遍历到最后一个节点，跳出循环
	while (pa != NULL)
	{

		printf("%f   %d ", pa->coef, pa->expn);

		pa = pa->next;
	}
	printf("\n");
}
/*Lb输出函数，和La作用以及实现方式相同*/
void Lbdisplay()
{
	pb = Lbhead->next; printf("B组数据：");
	while (pb != NULL)
	{

		printf("%f  %d ", pb->coef, pb->expn);
		pb = pb->next;
	}
}
/* Lc输出函数，和La作用以及实现方式相同 */
void Lcdisplay()
{
	pc = Lchead->next;

	while (pc != NULL)
	{
		printf("%f  %d ", pc->coef, pc->expn);
		pc = pc->next;
	}
}
/* 合并函数，求两个集合的并集 */
void add()
{
	pa = Lahead->next; /* 先让pa,pb两个遍历指针指向各自的第一个节点 */
	pb = Lbhead->next;
	Lchead = pc = Lahead;

	while (pa&&pb)    /* 判断两个链表的元素是否遍历完*/
	{
		
		if (pa == NULL) Lahead->next = pb;
		/*  判断两个链表元素的值大小，共三种情况,若La中的元素比Lb小，
		则将此时La中此时遍历指针指向的节点连接到Lc中对应的节点的next，
		反之，将Lb中的遍历指针指向的节点连接到Lc对应的节点的next，
		若La和Lb中的元素相等，则将La或Lb中的节点连接给Lc对应节点的next */
		if (pa->expn < pb->expn)/* 第一种情况 */

		{
			/* 先将pc->next指向此时元素值小的节点，再让Lc的遍历指针下移，指向pa;继续让La的遍历指针下移，判断下个节点的值的大小*/
			pc->next = pa; pc = pa; pa = pa->next;
		}

		else
			if (pa->expn == pb->expn)
			{
				/* 当两值相等时，pc的下个节点可以是任意一个，此时由于两个值相等，所以La和Lb的遍历指针都要下移*/
				if ((pa->coef + pb->coef) != 0.0)
				{
					qa = pa; qb = pb;pc->next = pa;pc = pa;
					pc->coef = pa->coef + pb->coef;   pa = pa->next; pb = pb->next; free(qb);
				}
				else
				{
					qa = pa; qb = pb;
					pc->next = pa->next;
					pc = pa->next;
					free(qa); free(qb);
				}
			}
			else
			{
				/* 该句和第一句的功能相同，只把pa换成pb，因为此时Lb中的元素值小*/
				pc->next = pb; pc = pb; pb = pb->next;
			}
	}

	/* 循环跳出后，说明有一个链表已经遍历结束了，
	若La遍历结束，则将Lb中剩余的节点连接到Lc,
	若Lb遍历结束，则将La中剩余的节点连接到Lc*/
	pc->next = pa ? pa : pb;
	free(Lbhead);   //之后，释放掉Lb的head节点，因为是用Lahead作为Lc的head;
}
void cut()
{
	pa = Lahead->next; /* 先让pa,pb两个遍历指针指向各自的第一个节点 */
	pb = Lbhead->next;
	Lchead = pc = Lahead;

	while (pa&&pb)    /* 判断两个链表的元素是否遍历完*/
	{

		if (pa == NULL) Lahead->next = pb;
		while (pa&&pb)    /* 判断两个链表的元素是否遍历完*/
		{

			if (pa == NULL) Lahead->next = pb;
			/*  判断两个链表元素的值大小，共三种情况,若La中的元素比Lb小，
			则将此时La中此时遍历指针指向的节点连接到Lc中对应的节点的next，
			反之，将Lb中的遍历指针指向的节点连接到Lc对应的节点的next，
			若La和Lb中的元素相等，则将La或Lb中的节点连接给Lc对应节点的next */
			if (pa->expn < pb->expn)/* 第一种情况 */

			{
				/* 先将pc->next指向此时元素值小的节点，再让Lc的遍历指针下移，指向pa;继续让La的遍历指针下移，判断下个节点的值的大小*/
				pc->next = pa; pc = pa; pa = pa->next;
			}

			else
				if (pa->expn == pb->expn)
				{
					/* 当两值相等时，pc的下个节点可以是任意一个，此时由于两个值相等，所以La和Lb的遍历指针都要下移*/
					if ((pa->coef - pb->coef) != 0.0)
					{
						qa = pa; qb = pb; pc->next = pa; pc = pa;
						pc->coef = pa->coef - pb->coef;   pa = pa->next; pb = pb->next; free(qb);
					}
					else
					{
						qa = pa; qb = pb;
						pc->next = pa->next;
						pc = pa->next;
						free(qa); free(qb);
					}
				}
				else
				{
					/* 该句和第一句的功能相同，只把pa换成pb，因为此时Lb中的元素值小*/
					pc->next = pb; pc = pb; pb = pb->next;
				}
		}

		/* 循环跳出后，说明有一个链表已经遍历结束了，
		若La遍历结束，则将Lb中剩余的节点连接到Lc,
		若Lb遍历结束，则将La中剩余的节点连接到Lc*/
		pc->next = pa ? pa : pb;
		free(Lbhead);   //之后，释放掉Lb的head节点，因为是用Lahead作为Lc的head;
	}
}
void sort(L *lx)
{
	p = lx; 
	L *pTmp = (L*)malloc(m);
	p = p->next; printf("%f %d", p->coef, p->expn);
	w = p->next;
	while (p->next!=NULL)
	{
		while (w)
		{
			if (p->expn > w->expn){
				pTmp->coef  = w->coef ;
				w->coef  = p->coef ;
				p ->coef = pTmp->coef ;
				pTmp->expn = w->expn;
				w->expn  = p->expn ;
				p->expn  = pTmp->expn ;
			}
			w = w->next; 
			
		}
		p = p->next; w = p->next;
	}
	p = q = w= NULL ;
}
int main()                   //主函数
{
	/*建立三次链表，测试三个函数*/
	Labulid(); Ladisplay(); sort(Lahead); printf("\n"); Ladisplay();
	//Lbbulid(); Lbdisplay(); add();  printf("\n"); //printf("两集合的并集为:"); Lcdisplay(); printf("\n");
	/*Labulid();
	/*Lbbulid(); Ladisplay(); Lbdisplay(); intersect(); printf("\n"); printf("两集合的交集为:"); Lcdisplay(); printf("\n");
	Labulid();
	Lbbulid(); Ladisplay(); Lbdisplay(); disparity(); printf("\n"); printf("两集合的差集为:"); Lcdisplay(); printf("\n");*/
//system("pause");
	return 0;
}